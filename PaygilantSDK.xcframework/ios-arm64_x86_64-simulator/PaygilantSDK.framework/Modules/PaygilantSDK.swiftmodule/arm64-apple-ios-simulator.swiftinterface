// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-4.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PaygilantSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import AdSupport
import AppTrackingTransparency
import AuthenticationServices
import CoreTelephony.CTCarrier
import SystemConfiguration.CaptiveNetwork
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import Compression
import Contacts
import CoreLocation
import CoreTelephony
import EventKitUI
import Foundation
@_exported import PaygilantSDK
import Photos
import SafariServices
import Security
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class ToastMessage {
  public static func displayToastMessage(_ message: Swift.String, duration: Swift.Double? = 0.5, delay: Swift.Double? = 0.0)
  @objc deinit
}
@objc public enum PaygilantError : Swift.Int, Swift.Error {
  case MESSAGE_SERVER_URL
  case SET_APPROVE_POLICY_METHOD_TO_TRUE
  case ERROR_CONNECTION
  case FACE_RECOGNITION_URL_NOT_CONFIGURED
  case INVALID_CALLBACK_SCHEME_IN_IOS
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class PaygilantManager : ObjectiveC.NSObject {
  public typealias PaygilantCompletion = (Swift.Result<Swift.Void, PaygilantSDK.PaygilantError>) -> Swift.Void
  @objc public static var shared: PaygilantSDK.PaygilantManager
  @objc public static func reset()
  public func setup(serverUrl: Swift.String, clientSessionId: Swift.String? = nil, toAskPermissions: Swift.Bool = false, crossPlatform: PaygilantSDK.CrossPlatformVersion? = nil, completion: @escaping PaygilantSDK.PaygilantManager.PaygilantCompletion) throws
  @objc public func setup(serverUrl: Swift.String, clientSessionId: Swift.String? = nil, toAskPermissions: Swift.Bool, crossPlatform: PaygilantSDK.CrossPlatformVersion? = nil, success: @escaping () -> Swift.Void, failure: @escaping (Swift.String) -> Swift.Void)
  @objc public func setup(serverUrl: Swift.String, clientSessionId: Swift.String? = nil, toAskPermissions: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (Swift.String) -> Swift.Void)
  @objc public func setup(serverUrl: Swift.String, clientSessionId: Swift.String? = nil, success: @escaping () -> Swift.Void, failure: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
  @objc public func getSessionId(sessionIdCallback: @escaping (Swift.String) -> Swift.Void)
  @objc public func setApprovePolicy(_ approvePolicy: Swift.Bool = true)
  @objc public func isApprovePolicy() -> Swift.Bool
  @objc public func askPaygilantPermissions()
  @objc public func setClientSessionId(_ clientSessionId: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func startUserVerification(from viewController: UIKit.UIViewController, userId: Swift.String, callback: @escaping (Swift.Bool) -> Swift.Void)
}
@objc public enum CrossPlatformType : Swift.Int {
  case reactNative
  case flutter
  case ionic
  case nativeScript
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class FaceVerificationManager : ObjectiveC.NSObject {
  @objc public static let shared: PaygilantSDK.FaceVerificationManager
  @objc public func verify(from viewController: UIKit.UIViewController, userId: Swift.String, sessionId: Swift.String, callback: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CrossPlatformVersion : ObjectiveC.NSObject {
  @objc public var version: Swift.String
  @objc public var crossPlatformType: PaygilantSDK.CrossPlatformType
  @objc override dynamic public init()
  @objc public init(version: Swift.String, crossPlatformType: PaygilantSDK.CrossPlatformType)
  @objc public func getJson() -> [Swift.String : Any]
  @objc deinit
}
extension PaygilantSDK.CrossPlatformType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension PaygilantSDK.PaygilantError : Swift.Equatable {}
extension PaygilantSDK.PaygilantError : Swift.Hashable {}
extension PaygilantSDK.PaygilantError : Swift.RawRepresentable {}
extension PaygilantSDK.CrossPlatformType : Swift.Equatable {}
extension PaygilantSDK.CrossPlatformType : Swift.Hashable {}
extension PaygilantSDK.CrossPlatformType : Swift.RawRepresentable {}
