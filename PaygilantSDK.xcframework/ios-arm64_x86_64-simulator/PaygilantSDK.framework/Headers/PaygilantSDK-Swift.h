#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-4.2 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef PAYGILANTSDK_SWIFT_H
#define PAYGILANTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaygilantSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, MobilePermission, open) {
  MobilePermissionReadContacts = 0,
  MobilePermissionReadContactsLimited = 1,
  MobilePermissionACCESS_FINE_LOCATION = 2,
  MobilePermissionACCESS_COARSE_LOCATION = 3,
  MobilePermissionCamera = 4,
  MobilePermissionPhoto = 5,
  MobilePermissionPhotoLimited = 6,
  MobilePermissionIdfa = 7,
};

@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC12PaygilantSDK26MobilePermissionEnumerator")
@interface MobilePermissionEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK24MobilePermissionToString")
@interface MobilePermissionToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum MobilePermission)type SWIFT_WARN_UNUSED_RESULT;
+ (enum MobilePermission)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum ScreenListenerType : NSInteger;
@class UIView;
@class PaygilantScreenListener;

SWIFT_CLASS("_TtC12PaygilantSDK16PaygilantManager")
@interface PaygilantManager : NSObject
/// shared is called each time you want to use the PaygilantManager class and only after PaygilantManager.setup.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PaygilantManager * _Nonnull shared;)
+ (PaygilantManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PaygilantManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// PaygilantManager is a singleton and thus setup() should be used upon application launch and only once. The setup() method must be called before calling sharedInstance
/// \param serverUrl Server URL is used to identify the app environment at the Paygilant Cloud environment. This ID will be provided by Paygilant during integration process.
///
/// \param userId App user ID. Optional value, which can be omitted if doesn’t exist at this point.
///
- (BOOL)setupWithServerUrl:(NSString * _Nonnull)serverUrl userId:(NSString * _Nullable)userId error:(NSError * _Nullable * _Nullable)error;
/// get session id from paygilant
///
/// returns:
/// session id
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `getSessionId(sessionIdCallback:)` instead. The new method handles the session ID asynchronously.");
/// Asynchronously retrieves the current session ID.
/// note:
/// The closure is executed on a background thread; use <code>DispatchQueue.main.async</code> for UI updates.
/// \param sessionIdCallback A closure that is called with the session ID as a <code>String</code>.
/// <ul>
///   <li>
///     If the session is successful, the session ID is provided.
///   </li>
///   <li>
///     If the session fails or times out, a constant indicating failure (e.g., <code>no_session_id</code>) is passed.
///   </li>
/// </ul>
///
- (void)getSessionIdWithSessionIdCallback:(void (^ _Nonnull)(NSString * _Nonnull))sessionIdCallback;
/// get device id from paygilant
///
/// returns:
/// device id
- (NSString * _Nullable)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// After the login or registration process,
/// When the user receives the “user id”, the app needs to update the SDK with this information.
/// \param userId user Id, default: “UNKNOWN”
///
- (void)setUserIdWithUserId:(NSString * _Nullable)userId SWIFT_DEPRECATED_MSG("no longer available ...");
/// After the initialize and approve policy process.
/// <ul>
///   <li>
///     the app needs to update the SDK with this information.
///   </li>
/// </ul>
/// \param approvePolicy approvePolicy ,default: true
///
- (void)setApprovePolicy:(BOOL)approvePolicy;
/// checking if our status isApprovePolicy
///
/// returns:
/// isApprovePolicy
- (BOOL)isApprovePolicy SWIFT_WARN_UNUSED_RESULT;
/// Once the logout event occurs in the application, this function should be called.
- (void)logout SWIFT_DEPRECATED_MSG("no longer available ...");
/// Called when we want to start listening for events that occurred during application lifetime.
/// Call startNewScreenListener inside viewWillAppear() Controller method for listening to all events occurring during the Controller lifetime.
/// This is the only way that the application should initialize PaygilantScreenListener object.
/// \param type Type of the screen.
///
/// \param actionId Unique ID for an action.
///
/// \param view Pass contain view in controller.
///
///
/// returns:
/// Object that is used to manage tracking.
- (PaygilantScreenListener * _Nonnull)startNewScreenListenerWith:(enum ScreenListenerType)type actionId:(NSInteger)actionId view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("no longer available ...");
/// Used to update the PaygilantManager with device ID information, best if called immediately after PaygilantManager.setup.
- (void)initializeDeviceId SWIFT_DEPRECATED_MSG("no longer available ...");
/// alled on relevant request access when requesting permissions for the application.
/// \param typeMobilePermission Paygilant enum for relevant mobile permissions
///
- (void)onRequestAccessWithTypeMobilePermission:(enum MobilePermission)typeMobilePermission SWIFT_DEPRECATED_MSG("no longer available ...");
@end


/// PaygilantScreenListener is the SDK class that monitors the user’s interactions with the application and device.
/// The class supports monitoring user touch events, motion sensors or both.
/// Monitoring user interaction and motion sensors is a resource-intensive process.
/// Paygilant therefore recommends seeking guidance from its assigned  customer success manager to ensure that selected
/// checkpoints/screens/events for monitoring are carefully chosen.
SWIFT_CLASS("_TtC12PaygilantSDK23PaygilantScreenListener")
@interface PaygilantScreenListener : NSObject
/// Init PaygilantScreenListener
/// \param screenListenerType screenListenerType
///
/// \param actionId actionId
///
/// \param view self.view
///
- (nonnull instancetype)initWithType:(enum ScreenListenerType)type actionId:(NSInteger)actionId view:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
/// Called when completing screen tracking and when stopping to listen to motion sensors, e.g. moving to next screen, pushing on login button etc.
/// It must be called from the viewWillDisappear() controller method.
- (void)finishScreenListener SWIFT_DEPRECATED_MSG("no longer available ...");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ScreenListenerType, open) {
  ScreenListenerTypeREGISTRATION_FORM = 0,
  ScreenListenerTypeLOGIN_FORM = 1,
  ScreenListenerTypeMAIN_SCREEN = 2,
  ScreenListenerTypeCATALOG_SCREEN = 3,
  ScreenListenerTypeSEARCH_SCREEN = 4,
  ScreenListenerTypePRODUCT_SCREEN = 5,
  ScreenListenerTypeGENERAL_FORM = 6,
  ScreenListenerTypePINCODE = 7,
  ScreenListenerTypeTRANSACTION_DETAILS = 8,
  ScreenListenerTypeCONTACTS = 9,
  ScreenListenerTypePAYMENT_SCREEN = 10,
  ScreenListenerTypeEMULATOR_CHECK = 11,
  ScreenListenerTypeGENERAL = 12,
  ScreenListenerTypeADD_PAYMENT_SCREEN = 13,
  ScreenListenerTypeWITHDRAW_SCREEN = 14,
  ScreenListenerTypeDEPOSIT_SCREEN = 15,
  ScreenListenerTypeNOTIFICATION = 16,
  ScreenListenerTypeCARD_SCREEN = 17,
  ScreenListenerTypeLOGIN = 18,
};


SWIFT_CLASS("_TtC12PaygilantSDK28ScreenListenerTypeEnumerator") SWIFT_DEPRECATED_MSG("no longer available ...")
@interface ScreenListenerTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("no longer available ...");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK26ScreenListenerTypeToString") SWIFT_DEPRECATED_MSG("no longer available ...")
@interface ScreenListenerTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum ScreenListenerType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum ScreenListenerType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("no longer available ...");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0 effective-4.2 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef PAYGILANTSDK_SWIFT_H
#define PAYGILANTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaygilantSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, MobilePermission, open) {
  MobilePermissionReadContacts = 0,
  MobilePermissionReadContactsLimited = 1,
  MobilePermissionACCESS_FINE_LOCATION = 2,
  MobilePermissionACCESS_COARSE_LOCATION = 3,
  MobilePermissionCamera = 4,
  MobilePermissionPhoto = 5,
  MobilePermissionPhotoLimited = 6,
  MobilePermissionIdfa = 7,
};

@class NSString;
@class NSNumber;

SWIFT_CLASS("_TtC12PaygilantSDK26MobilePermissionEnumerator")
@interface MobilePermissionEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK24MobilePermissionToString")
@interface MobilePermissionToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum MobilePermission)type SWIFT_WARN_UNUSED_RESULT;
+ (enum MobilePermission)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum ScreenListenerType : NSInteger;
@class UIView;
@class PaygilantScreenListener;

SWIFT_CLASS("_TtC12PaygilantSDK16PaygilantManager")
@interface PaygilantManager : NSObject
/// shared is called each time you want to use the PaygilantManager class and only after PaygilantManager.setup.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PaygilantManager * _Nonnull shared;)
+ (PaygilantManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PaygilantManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// PaygilantManager is a singleton and thus setup() should be used upon application launch and only once. The setup() method must be called before calling sharedInstance
/// \param serverUrl Server URL is used to identify the app environment at the Paygilant Cloud environment. This ID will be provided by Paygilant during integration process.
///
/// \param userId App user ID. Optional value, which can be omitted if doesn’t exist at this point.
///
- (BOOL)setupWithServerUrl:(NSString * _Nonnull)serverUrl userId:(NSString * _Nullable)userId error:(NSError * _Nullable * _Nullable)error;
/// get session id from paygilant
///
/// returns:
/// session id
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `getSessionId(sessionIdCallback:)` instead. The new method handles the session ID asynchronously.");
/// Asynchronously retrieves the current session ID.
/// note:
/// The closure is executed on a background thread; use <code>DispatchQueue.main.async</code> for UI updates.
/// \param sessionIdCallback A closure that is called with the session ID as a <code>String</code>.
/// <ul>
///   <li>
///     If the session is successful, the session ID is provided.
///   </li>
///   <li>
///     If the session fails or times out, a constant indicating failure (e.g., <code>no_session_id</code>) is passed.
///   </li>
/// </ul>
///
- (void)getSessionIdWithSessionIdCallback:(void (^ _Nonnull)(NSString * _Nonnull))sessionIdCallback;
/// get device id from paygilant
///
/// returns:
/// device id
- (NSString * _Nullable)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// After the login or registration process,
/// When the user receives the “user id”, the app needs to update the SDK with this information.
/// \param userId user Id, default: “UNKNOWN”
///
- (void)setUserIdWithUserId:(NSString * _Nullable)userId SWIFT_DEPRECATED_MSG("no longer available ...");
/// After the initialize and approve policy process.
/// <ul>
///   <li>
///     the app needs to update the SDK with this information.
///   </li>
/// </ul>
/// \param approvePolicy approvePolicy ,default: true
///
- (void)setApprovePolicy:(BOOL)approvePolicy;
/// checking if our status isApprovePolicy
///
/// returns:
/// isApprovePolicy
- (BOOL)isApprovePolicy SWIFT_WARN_UNUSED_RESULT;
/// Once the logout event occurs in the application, this function should be called.
- (void)logout SWIFT_DEPRECATED_MSG("no longer available ...");
/// Called when we want to start listening for events that occurred during application lifetime.
/// Call startNewScreenListener inside viewWillAppear() Controller method for listening to all events occurring during the Controller lifetime.
/// This is the only way that the application should initialize PaygilantScreenListener object.
/// \param type Type of the screen.
///
/// \param actionId Unique ID for an action.
///
/// \param view Pass contain view in controller.
///
///
/// returns:
/// Object that is used to manage tracking.
- (PaygilantScreenListener * _Nonnull)startNewScreenListenerWith:(enum ScreenListenerType)type actionId:(NSInteger)actionId view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("no longer available ...");
/// Used to update the PaygilantManager with device ID information, best if called immediately after PaygilantManager.setup.
- (void)initializeDeviceId SWIFT_DEPRECATED_MSG("no longer available ...");
/// alled on relevant request access when requesting permissions for the application.
/// \param typeMobilePermission Paygilant enum for relevant mobile permissions
///
- (void)onRequestAccessWithTypeMobilePermission:(enum MobilePermission)typeMobilePermission SWIFT_DEPRECATED_MSG("no longer available ...");
@end


/// PaygilantScreenListener is the SDK class that monitors the user’s interactions with the application and device.
/// The class supports monitoring user touch events, motion sensors or both.
/// Monitoring user interaction and motion sensors is a resource-intensive process.
/// Paygilant therefore recommends seeking guidance from its assigned  customer success manager to ensure that selected
/// checkpoints/screens/events for monitoring are carefully chosen.
SWIFT_CLASS("_TtC12PaygilantSDK23PaygilantScreenListener")
@interface PaygilantScreenListener : NSObject
/// Init PaygilantScreenListener
/// \param screenListenerType screenListenerType
///
/// \param actionId actionId
///
/// \param view self.view
///
- (nonnull instancetype)initWithType:(enum ScreenListenerType)type actionId:(NSInteger)actionId view:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
/// Called when completing screen tracking and when stopping to listen to motion sensors, e.g. moving to next screen, pushing on login button etc.
/// It must be called from the viewWillDisappear() controller method.
- (void)finishScreenListener SWIFT_DEPRECATED_MSG("no longer available ...");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ScreenListenerType, open) {
  ScreenListenerTypeREGISTRATION_FORM = 0,
  ScreenListenerTypeLOGIN_FORM = 1,
  ScreenListenerTypeMAIN_SCREEN = 2,
  ScreenListenerTypeCATALOG_SCREEN = 3,
  ScreenListenerTypeSEARCH_SCREEN = 4,
  ScreenListenerTypePRODUCT_SCREEN = 5,
  ScreenListenerTypeGENERAL_FORM = 6,
  ScreenListenerTypePINCODE = 7,
  ScreenListenerTypeTRANSACTION_DETAILS = 8,
  ScreenListenerTypeCONTACTS = 9,
  ScreenListenerTypePAYMENT_SCREEN = 10,
  ScreenListenerTypeEMULATOR_CHECK = 11,
  ScreenListenerTypeGENERAL = 12,
  ScreenListenerTypeADD_PAYMENT_SCREEN = 13,
  ScreenListenerTypeWITHDRAW_SCREEN = 14,
  ScreenListenerTypeDEPOSIT_SCREEN = 15,
  ScreenListenerTypeNOTIFICATION = 16,
  ScreenListenerTypeCARD_SCREEN = 17,
  ScreenListenerTypeLOGIN = 18,
};


SWIFT_CLASS("_TtC12PaygilantSDK28ScreenListenerTypeEnumerator") SWIFT_DEPRECATED_MSG("no longer available ...")
@interface ScreenListenerTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("no longer available ...");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK26ScreenListenerTypeToString") SWIFT_DEPRECATED_MSG("no longer available ...")
@interface ScreenListenerTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum ScreenListenerType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum ScreenListenerType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("no longer available ...");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
