#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-4.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef PAYGILANTSDK_SWIFT_H
#define PAYGILANTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaygilantSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, CrossPlatformType, open) {
  CrossPlatformTypeReactNative = 0,
  CrossPlatformTypeFlutter = 1,
  CrossPlatformTypeIonic = 2,
  CrossPlatformTypeNativeScript = 3,
  CrossPlatformTypeNone = 4,
};

@class NSString;
SWIFT_CLASS("_TtC12PaygilantSDK20CrossPlatformVersion")
@interface CrossPlatformVersion : NSObject
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic) enum CrossPlatformType crossPlatformType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithVersion:(NSString * _Nonnull)version crossPlatformType:(enum CrossPlatformType)crossPlatformType OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
SWIFT_CLASS("_TtC12PaygilantSDK23FaceVerificationManager")
@interface FaceVerificationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FaceVerificationManager * _Nonnull shared;)
+ (FaceVerificationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Starts the WebView-based face verification flow.
/// \param viewController presenting view controller
///
/// \param userId application’s user ID
///
/// \param sessionId Paygilant session ID
///
/// \param callback called with <code>true</code> on success, <code>false</code> otherwise
///
- (void)verifyFrom:(UIViewController * _Nonnull)viewController userId:(NSString * _Nonnull)userId sessionId:(NSString * _Nonnull)sessionId callback:(void (^ _Nonnull)(BOOL))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration representing various error types for Paygilant operations.
/// <ul>
///   <li>
///     MESSAGE_SERVER_URL: Error indicating the server URL is empty.
///   </li>
///   <li>
///     SET_APPROVE_POLICY_TO_TRUE: Error indicating the approval policy needs to be set to true.
///   </li>
///   <li>
///     ERROR_CONNECTION: Error indicating a connection issue with the server.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PaygilantError, open) {
  PaygilantErrorMESSAGE_SERVER_URL = 0,
  PaygilantErrorSET_APPROVE_POLICY_METHOD_TO_TRUE = 1,
  PaygilantErrorERROR_CONNECTION = 2,
  PaygilantErrorFACE_RECOGNITION_URL_NOT_CONFIGURED = 3,
  PaygilantErrorINVALID_CALLBACK_SCHEME_IN_IOS = 4,
};
static NSString * _Nonnull const PaygilantErrorDomain = @"PaygilantSDK.PaygilantError";

/// Manager class for Paygilant, handling initialization, configuration, and session management.
SWIFT_CLASS("_TtC12PaygilantSDK16PaygilantManager")
@interface PaygilantManager : NSObject
/// Shared instance for using the PaygilantManager class. Must be initialized with <code>setup()</code> before usage.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PaygilantManager * _Nonnull shared;)
+ (PaygilantManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PaygilantManager * _Nonnull)value;
/// Initializes a new instance of PaygilantManager.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Method used for testing purposes, to wipe all states and reset the manager.
+ (void)reset;
/// Sets up the PaygilantManager instance, compatible with Objective-C.
/// \param serverUrl The server URL, provided by Paygilant.
///
/// \param clientSessionId Optional client session ID.
///
/// \param toAskPermissions if to ask all Paygilant List Permissions
///
/// \param crossPlatform retrieving the cross platform data for manipulate.
///
/// \param success Callback for successful setup.
///
/// \param failure Callback for setup failure, with an error description.
///
- (void)setupWithServerUrl:(NSString * _Nonnull)serverUrl clientSessionId:(NSString * _Nullable)clientSessionId toAskPermissions:(BOOL)toAskPermissions crossPlatform:(CrossPlatformVersion * _Nullable)crossPlatform success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Sets up the PaygilantManager instance, compatible with Objective-C.
/// \param serverUrl The server URL, provided by Paygilant.
///
/// \param clientSessionId Optional client session ID.
///
/// \param toAskPermissions if to ask all Paygilant List Permissions
///
/// \param success Callback for successful setup.
///
/// \param failure Callback for setup failure, with an error description.
///
- (void)setupWithServerUrl:(NSString * _Nonnull)serverUrl clientSessionId:(NSString * _Nullable)clientSessionId toAskPermissions:(BOOL)toAskPermissions success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Sets up the PaygilantManager instance, compatible with Objective-C.
/// \param serverUrl The server URL, provided by Paygilant.
///
/// \param clientSessionId Optional client session ID.
///
/// \param success Callback for successful setup.
///
/// \param failure Callback for setup failure, with an error description.
///
- (void)setupWithServerUrl:(NSString * _Nonnull)serverUrl clientSessionId:(NSString * _Nullable)clientSessionId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Asynchronously retrieves the current session ID.
/// note:
/// The closure is executed on a background thread; use <code>DispatchQueue.main.async</code> for UI updates.
/// \param sessionIdCallback A closure that is called with the session ID as a <code>String</code>.
/// <ul>
///   <li>
///     If the session is successful, the session ID is provided.
///   </li>
///   <li>
///     If the session fails or times out, a constant indicating failure (e.g., <code>no_session_id</code>) is passed.
///   </li>
/// </ul>
///
- (void)getSessionIdWithSessionIdCallback:(void (^ _Nonnull)(NSString * _Nonnull))sessionIdCallback;
/// After the initialize and approve policy process.
/// <ul>
///   <li>
///     the app needs to update the SDK with this information.
///   </li>
/// </ul>
/// \param approvePolicy approvePolicy ,default: true
///
- (void)setApprovePolicy:(BOOL)approvePolicy;
/// checking if our status isApprovePolicy
///
/// returns:
/// isApprovePolicy
- (BOOL)isApprovePolicy SWIFT_WARN_UNUSED_RESULT;
/// Initiates the permission request process after confirming that the user
/// has approved the necessary policies.
/// This method should be invoked once the user has agreed to the application’s
/// privacy policy or terms of service. It ensures that all necessary runtime
/// permissions are requested according to the user’s consent and app requirements.
/// precondition:
///
/// <ul>
///   <li>
///     User must have agreed to the application’s privacy policy.
///   </li>
///   <li>
///     <code>Info.plist</code> must contain the required NS*UsageDescription keys for
///     the permissions being requested.
///   </li>
/// </ul>
/// postcondition:
///
/// <ul>
///   <li>
///     Permissions are requested from the user as needed.
///   </li>
///   <li>
///     The <code>toAskPermissions</code> flag will be set to false after executing,
///     indicating that the permission request flow has completed or was not needed.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Usage:
///     Call this method when it’s appropriate to ask the user for permissions,
///     typically after they have agreed to your privacy policies or when they
///     are about to use functionality requiring these permissions. Ideal scenarios
///     include after successful login or during the onboarding process.
///   </li>
///   <li>
///     Example:
///     \code
///     if userConsentsToPrivacyPolicy {
///         PaygilantSDK.shared.askPaygilantPermissions()
///     }
///
///     \endcode</li>
/// </ul>
/// <ul>
///   <li>
///   </li>
/// </ul>
- (void)askPaygilantPermissions;
- (void)setClientSessionId:(NSString * _Nonnull)clientSessionId callback:(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (void)startUserVerificationFrom:(UIViewController * _Nonnull)viewController userId:(NSString * _Nonnull)userId callback:(void (^ _Nonnull)(BOOL))callback;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-4.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef PAYGILANTSDK_SWIFT_H
#define PAYGILANTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaygilantSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, CrossPlatformType, open) {
  CrossPlatformTypeReactNative = 0,
  CrossPlatformTypeFlutter = 1,
  CrossPlatformTypeIonic = 2,
  CrossPlatformTypeNativeScript = 3,
  CrossPlatformTypeNone = 4,
};

@class NSString;
SWIFT_CLASS("_TtC12PaygilantSDK20CrossPlatformVersion")
@interface CrossPlatformVersion : NSObject
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic) enum CrossPlatformType crossPlatformType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithVersion:(NSString * _Nonnull)version crossPlatformType:(enum CrossPlatformType)crossPlatformType OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
SWIFT_CLASS("_TtC12PaygilantSDK23FaceVerificationManager")
@interface FaceVerificationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FaceVerificationManager * _Nonnull shared;)
+ (FaceVerificationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Starts the WebView-based face verification flow.
/// \param viewController presenting view controller
///
/// \param userId application’s user ID
///
/// \param sessionId Paygilant session ID
///
/// \param callback called with <code>true</code> on success, <code>false</code> otherwise
///
- (void)verifyFrom:(UIViewController * _Nonnull)viewController userId:(NSString * _Nonnull)userId sessionId:(NSString * _Nonnull)sessionId callback:(void (^ _Nonnull)(BOOL))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumeration representing various error types for Paygilant operations.
/// <ul>
///   <li>
///     MESSAGE_SERVER_URL: Error indicating the server URL is empty.
///   </li>
///   <li>
///     SET_APPROVE_POLICY_TO_TRUE: Error indicating the approval policy needs to be set to true.
///   </li>
///   <li>
///     ERROR_CONNECTION: Error indicating a connection issue with the server.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PaygilantError, open) {
  PaygilantErrorMESSAGE_SERVER_URL = 0,
  PaygilantErrorSET_APPROVE_POLICY_METHOD_TO_TRUE = 1,
  PaygilantErrorERROR_CONNECTION = 2,
  PaygilantErrorFACE_RECOGNITION_URL_NOT_CONFIGURED = 3,
  PaygilantErrorINVALID_CALLBACK_SCHEME_IN_IOS = 4,
};
static NSString * _Nonnull const PaygilantErrorDomain = @"PaygilantSDK.PaygilantError";

/// Manager class for Paygilant, handling initialization, configuration, and session management.
SWIFT_CLASS("_TtC12PaygilantSDK16PaygilantManager")
@interface PaygilantManager : NSObject
/// Shared instance for using the PaygilantManager class. Must be initialized with <code>setup()</code> before usage.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PaygilantManager * _Nonnull shared;)
+ (PaygilantManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PaygilantManager * _Nonnull)value;
/// Initializes a new instance of PaygilantManager.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Method used for testing purposes, to wipe all states and reset the manager.
+ (void)reset;
/// Sets up the PaygilantManager instance, compatible with Objective-C.
/// \param serverUrl The server URL, provided by Paygilant.
///
/// \param clientSessionId Optional client session ID.
///
/// \param toAskPermissions if to ask all Paygilant List Permissions
///
/// \param crossPlatform retrieving the cross platform data for manipulate.
///
/// \param success Callback for successful setup.
///
/// \param failure Callback for setup failure, with an error description.
///
- (void)setupWithServerUrl:(NSString * _Nonnull)serverUrl clientSessionId:(NSString * _Nullable)clientSessionId toAskPermissions:(BOOL)toAskPermissions crossPlatform:(CrossPlatformVersion * _Nullable)crossPlatform success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Sets up the PaygilantManager instance, compatible with Objective-C.
/// \param serverUrl The server URL, provided by Paygilant.
///
/// \param clientSessionId Optional client session ID.
///
/// \param toAskPermissions if to ask all Paygilant List Permissions
///
/// \param success Callback for successful setup.
///
/// \param failure Callback for setup failure, with an error description.
///
- (void)setupWithServerUrl:(NSString * _Nonnull)serverUrl clientSessionId:(NSString * _Nullable)clientSessionId toAskPermissions:(BOOL)toAskPermissions success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Sets up the PaygilantManager instance, compatible with Objective-C.
/// \param serverUrl The server URL, provided by Paygilant.
///
/// \param clientSessionId Optional client session ID.
///
/// \param success Callback for successful setup.
///
/// \param failure Callback for setup failure, with an error description.
///
- (void)setupWithServerUrl:(NSString * _Nonnull)serverUrl clientSessionId:(NSString * _Nullable)clientSessionId success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSString * _Nonnull))failure;
/// Asynchronously retrieves the current session ID.
/// note:
/// The closure is executed on a background thread; use <code>DispatchQueue.main.async</code> for UI updates.
/// \param sessionIdCallback A closure that is called with the session ID as a <code>String</code>.
/// <ul>
///   <li>
///     If the session is successful, the session ID is provided.
///   </li>
///   <li>
///     If the session fails or times out, a constant indicating failure (e.g., <code>no_session_id</code>) is passed.
///   </li>
/// </ul>
///
- (void)getSessionIdWithSessionIdCallback:(void (^ _Nonnull)(NSString * _Nonnull))sessionIdCallback;
/// After the initialize and approve policy process.
/// <ul>
///   <li>
///     the app needs to update the SDK with this information.
///   </li>
/// </ul>
/// \param approvePolicy approvePolicy ,default: true
///
- (void)setApprovePolicy:(BOOL)approvePolicy;
/// checking if our status isApprovePolicy
///
/// returns:
/// isApprovePolicy
- (BOOL)isApprovePolicy SWIFT_WARN_UNUSED_RESULT;
/// Initiates the permission request process after confirming that the user
/// has approved the necessary policies.
/// This method should be invoked once the user has agreed to the application’s
/// privacy policy or terms of service. It ensures that all necessary runtime
/// permissions are requested according to the user’s consent and app requirements.
/// precondition:
///
/// <ul>
///   <li>
///     User must have agreed to the application’s privacy policy.
///   </li>
///   <li>
///     <code>Info.plist</code> must contain the required NS*UsageDescription keys for
///     the permissions being requested.
///   </li>
/// </ul>
/// postcondition:
///
/// <ul>
///   <li>
///     Permissions are requested from the user as needed.
///   </li>
///   <li>
///     The <code>toAskPermissions</code> flag will be set to false after executing,
///     indicating that the permission request flow has completed or was not needed.
///   </li>
/// </ul>
/// <ul>
///   <li>
///     Usage:
///     Call this method when it’s appropriate to ask the user for permissions,
///     typically after they have agreed to your privacy policies or when they
///     are about to use functionality requiring these permissions. Ideal scenarios
///     include after successful login or during the onboarding process.
///   </li>
///   <li>
///     Example:
///     \code
///     if userConsentsToPrivacyPolicy {
///         PaygilantSDK.shared.askPaygilantPermissions()
///     }
///
///     \endcode</li>
/// </ul>
/// <ul>
///   <li>
///   </li>
/// </ul>
- (void)askPaygilantPermissions;
- (void)setClientSessionId:(NSString * _Nonnull)clientSessionId callback:(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (void)startUserVerificationFrom:(UIViewController * _Nonnull)viewController userId:(NSString * _Nonnull)userId callback:(void (^ _Nonnull)(BOOL))callback;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
