// Generated by Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef PAYGILANTSDK_SWIFT_H
#define PAYGILANTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PaygilantSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// class that inherits for application checkpoints
/// using to update Paygilant SDK with app flow state and for getting risk to current action
SWIFT_CLASS("_TtC12PaygilantSDK10CheckPoint")
@interface CheckPoint : NSObject
/// set additional checkpoint data, by sending a Dict with the additional
/// \param additionalData additionalData
///
- (void)setAdditionalDataWithAdditionalData:(NSDictionary<NSString *, id> * _Nonnull)additionalData;
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
/// Description
///
/// returns:
/// return jsonObject [String : Any]
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Add Payment Method checkpoint
/// use when user add / change his payment method
/// e.g add credit card details
SWIFT_CLASS("_TtC12PaygilantSDK16AddPaymentMethod")
@interface AddPaymentMethod : CheckPoint
/// init <em>deprecated</em>
/// \param userId userId
///
/// \param paymentMethodToken paymentMethodToken
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId paymentMethodToken:(NSString * _Nonnull)paymentMethodToken OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("no longer avalible...");
/// Description
///
/// returns:
/// return jsonObject [String : Any]
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
/// init obj by json
/// \param json json
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM(NSInteger, CheckPointStatus, open) {
/// checkpoint was approved by the application / application server
  CheckPointStatusAPPROVED = 0,
/// checkpoint was denied / blocked by the application / application server
  CheckPointStatusDENIED = 1,
/// checkpoint was canceled by the user
  CheckPointStatusCANCELLED = 2,
};

@class NSNumber;

SWIFT_CLASS("_TtC12PaygilantSDK26CheckPointStatusEnumerator")
@interface CheckPointStatusEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK24CheckPointStatusToString")
@interface CheckPointStatusToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum CheckPointStatus)type SWIFT_WARN_UNUSED_RESULT;
+ (enum CheckPointStatus)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CheckPointType, open) {
  CheckPointTypeLAUNCH = 0,
  CheckPointTypeREGISTER = 1,
  CheckPointTypeLOGIN = 2,
  CheckPointTypeTRANSACTION = 3,
  CheckPointTypeUPDATE_DETAILS = 4,
  CheckPointTypeADD_PAYMENT_METHOD = 5,
  CheckPointTypeGENERAL = 6,
};


SWIFT_CLASS("_TtC12PaygilantSDK24CheckPointTypeEnumerator")
@interface CheckPointTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK22CheckPointTypeToString")
@interface CheckPointTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum CheckPointType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum CheckPointType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CurrencyCode, open) {
  CurrencyCodeAFN = 0,
  CurrencyCodeEUR = 1,
  CurrencyCodeALL = 2,
  CurrencyCodeDZD = 3,
  CurrencyCodeUSD = 4,
  CurrencyCodeAOA = 5,
  CurrencyCodeXCD = 6,
  CurrencyCodeARS = 7,
  CurrencyCodeAMD = 8,
  CurrencyCodeAWG = 9,
  CurrencyCodeAUD = 10,
  CurrencyCodeAZN = 11,
  CurrencyCodeBSD = 12,
  CurrencyCodeBHD = 13,
  CurrencyCodeBDT = 14,
  CurrencyCodeBBD = 15,
  CurrencyCodeBYN = 16,
  CurrencyCodeBZD = 17,
  CurrencyCodeXOF = 18,
  CurrencyCodeBMD = 19,
  CurrencyCodeINR = 20,
  CurrencyCodeBTN = 21,
  CurrencyCodeBOB = 22,
  CurrencyCodeBOV = 23,
  CurrencyCodeBAM = 24,
  CurrencyCodeBWP = 25,
  CurrencyCodeNOK = 26,
  CurrencyCodeBRL = 27,
  CurrencyCodeBND = 28,
  CurrencyCodeBGN = 29,
  CurrencyCodeBIF = 30,
  CurrencyCodeCVE = 31,
  CurrencyCodeKHR = 32,
  CurrencyCodeXAF = 33,
  CurrencyCodeCAD = 34,
  CurrencyCodeKYD = 35,
  CurrencyCodeCLP = 36,
  CurrencyCodeCLF = 37,
  CurrencyCodeCNY = 38,
  CurrencyCodeCOP = 39,
  CurrencyCodeCOU = 40,
  CurrencyCodeKMF = 41,
  CurrencyCodeCDF = 42,
  CurrencyCodeNZD = 43,
  CurrencyCodeCRC = 44,
  CurrencyCodeHRK = 45,
  CurrencyCodeCUP = 46,
  CurrencyCodeCUC = 47,
  CurrencyCodeANG = 48,
  CurrencyCodeCZK = 49,
  CurrencyCodeDKK = 50,
  CurrencyCodeDJF = 51,
  CurrencyCodeDOP = 52,
  CurrencyCodeEGP = 53,
  CurrencyCodeSVC = 54,
  CurrencyCodeERN = 55,
  CurrencyCodeETB = 56,
  CurrencyCodeFKP = 57,
  CurrencyCodeFJD = 58,
  CurrencyCodeXPF = 59,
  CurrencyCodeGMD = 60,
  CurrencyCodeGEL = 61,
  CurrencyCodeGHS = 62,
  CurrencyCodeGIP = 63,
  CurrencyCodeGTQ = 64,
  CurrencyCodeGBP = 65,
  CurrencyCodeGNF = 66,
  CurrencyCodeGYD = 67,
  CurrencyCodeHTG = 68,
  CurrencyCodeHNL = 69,
  CurrencyCodeHKD = 70,
  CurrencyCodeHUF = 71,
  CurrencyCodeISK = 72,
  CurrencyCodeIDR = 73,
  CurrencyCodeXDR = 74,
  CurrencyCodeIRR = 75,
  CurrencyCodeIQD = 76,
  CurrencyCodeILS = 77,
  CurrencyCodeJMD = 78,
  CurrencyCodeJPY = 79,
  CurrencyCodeJOD = 80,
  CurrencyCodeKZT = 81,
  CurrencyCodeKES = 82,
  CurrencyCodeKPW = 83,
  CurrencyCodeKRW = 84,
  CurrencyCodeKWD = 85,
  CurrencyCodeKGS = 86,
  CurrencyCodeLAK = 87,
  CurrencyCodeLBP = 88,
  CurrencyCodeLSL = 89,
  CurrencyCodeZAR = 90,
  CurrencyCodeLRD = 91,
  CurrencyCodeLYD = 92,
  CurrencyCodeCHF = 93,
  CurrencyCodeMOP = 94,
  CurrencyCodeMKD = 95,
  CurrencyCodeMGA = 96,
  CurrencyCodeMWK = 97,
  CurrencyCodeMYR = 98,
  CurrencyCodeMVR = 99,
  CurrencyCodeMRU = 100,
  CurrencyCodeMUR = 101,
  CurrencyCodeXUA = 102,
  CurrencyCodeMXN = 103,
  CurrencyCodeMXV = 104,
  CurrencyCodeMDL = 105,
  CurrencyCodeMNT = 106,
  CurrencyCodeMAD = 107,
  CurrencyCodeMZN = 108,
  CurrencyCodeMMK = 109,
  CurrencyCodeNAD = 110,
  CurrencyCodeNPR = 111,
  CurrencyCodeNIO = 112,
  CurrencyCodeNGN = 113,
  CurrencyCodeOMR = 114,
  CurrencyCodePKR = 115,
  CurrencyCodePAB = 116,
  CurrencyCodePGK = 117,
  CurrencyCodePYG = 118,
  CurrencyCodePEN = 119,
  CurrencyCodePHP = 120,
  CurrencyCodePLN = 121,
  CurrencyCodeQAR = 122,
  CurrencyCodeRON = 123,
  CurrencyCodeRUB = 124,
  CurrencyCodeRWF = 125,
  CurrencyCodeSHP = 126,
  CurrencyCodeWST = 127,
  CurrencyCodeSTN = 128,
  CurrencyCodeSAR = 129,
  CurrencyCodeRSD = 130,
  CurrencyCodeSCR = 131,
  CurrencyCodeSLL = 132,
  CurrencyCodeSGD = 133,
  CurrencyCodeXSU = 134,
  CurrencyCodeSBD = 135,
  CurrencyCodeSOS = 136,
  CurrencyCodeSSP = 137,
  CurrencyCodeLKR = 138,
  CurrencyCodeSDG = 139,
  CurrencyCodeSRD = 140,
  CurrencyCodeSZL = 141,
  CurrencyCodeSEK = 142,
  CurrencyCodeCHE = 143,
  CurrencyCodeCHW = 144,
  CurrencyCodeSYP = 145,
  CurrencyCodeTWD = 146,
  CurrencyCodeTJS = 147,
  CurrencyCodeTZS = 148,
  CurrencyCodeTHB = 149,
  CurrencyCodeTOP = 150,
  CurrencyCodeTTD = 151,
  CurrencyCodeTND = 152,
  CurrencyCodeTRY = 153,
  CurrencyCodeTMT = 154,
  CurrencyCodeUGX = 155,
  CurrencyCodeUAH = 156,
  CurrencyCodeAED = 157,
  CurrencyCodeUSN = 158,
  CurrencyCodeUYU = 159,
  CurrencyCodeUYI = 160,
  CurrencyCodeUYW = 161,
  CurrencyCodeUZS = 162,
  CurrencyCodeVUV = 163,
  CurrencyCodeVES = 164,
  CurrencyCodeVND = 165,
  CurrencyCodeYER = 166,
  CurrencyCodeZMW = 167,
  CurrencyCodeZWL = 168,
  CurrencyCodeXBA = 169,
  CurrencyCodeXBB = 170,
  CurrencyCodeXBC = 171,
  CurrencyCodeXBD = 172,
  CurrencyCodeXTS = 173,
  CurrencyCodeXXX = 174,
  CurrencyCodeXAU = 175,
  CurrencyCodeXPD = 176,
  CurrencyCodeXPT = 177,
  CurrencyCodeXAG = 178,
};


SWIFT_CLASS("_TtC12PaygilantSDK22CurrencyCodeEnumerator")
@interface CurrencyCodeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK20CurrencyCodeToString")
@interface CurrencyCodeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum CurrencyCode)type SWIFT_WARN_UNUSED_RESULT;
+ (enum CurrencyCode)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// General checkpoint
SWIFT_CLASS("_TtC12PaygilantSDK7General")
@interface General : CheckPoint
/// init
/// \param userId userId
///
- (nonnull instancetype)initWithUserId:(NSString * _Nullable)userId OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
/// init obj by json
/// \param json json
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@end


/// Launch checkpoint, to be used during app launch
SWIFT_CLASS("_TtC12PaygilantSDK6Launch")
@interface Launch : CheckPoint
/// init
- (nonnull instancetype)initWithUserId:(NSString * _Nullable)userId OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
/// init obj by json
/// \param json json
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@end


/// Login checkpoint, to be used during login attempt
SWIFT_CLASS("_TtC12PaygilantSDK5Login")
@interface Login : CheckPoint
- (nonnull instancetype)initWithLogin:(Login * _Nonnull)login OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
/// init obj by json
/// \param json json
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MobilePermission, open) {
  MobilePermissionReadContacts = 0,
  MobilePermissionAuthorizedAlways = 1,
  MobilePermissionAuthorizedWhenInUse = 2,
  MobilePermissionCamera = 3,
  MobilePermissionReminder = 4,
  MobilePermissionCalendar = 5,
  MobilePermissionPhoto = 6,
};


SWIFT_CLASS("_TtC12PaygilantSDK26MobilePermissionEnumerator")
@interface MobilePermissionEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK24MobilePermissionToString")
@interface MobilePermissionToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum MobilePermission)type SWIFT_WARN_UNUSED_RESULT;
+ (enum MobilePermission)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Risk;
enum ScreenListenerType : NSInteger;
@class UIView;
@class PaygilantScreenListener;

SWIFT_CLASS("_TtC12PaygilantSDK16PaygilantManager")
@interface PaygilantManager : NSObject
/// shared is called each time you want to use the PaygilantManager class and only after PaygilantManager.setup.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PaygilantManager * _Nonnull shared;)
+ (PaygilantManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PaygilantManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// PaygilantManager is a singleton and thus setup() should be used upon application launch and only once. The setup() method must be called before calling sharedInstance
/// \param serverUrl Server URL is used to identify the app environment at the Paygilant Cloud environment. This ID will be provided by Paygilant during integration process.
///
/// \param userId App user ID. Optional value, which can be omitted if doesn’t exist at this point.
///
- (BOOL)setupWithServerUrl:(NSString * _Nonnull)serverUrl userId:(NSString * _Nullable)userId error:(NSError * _Nullable * _Nullable)error;
/// get session id from paygilant
///
/// returns:
/// session id
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT;
/// get device id from paygilant
///
/// returns:
/// device id
- (NSString * _Nullable)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Once the logout event occurs in the application, this function should be called.
- (void)logout;
/// Called when arriving at a specific predefined checkpoint and the application needs to get Paygilant’s Risk Score.
/// \param checkPoint CheckPoint is an entity that contains any relevant data for current check point.
/// Note: Checkpoint is a base class and should not be used directly. i.e. use only inherited classes
///
/// \param completion (risk, signRisk, requestId) - Interface object that needs to be implemented when calling getRiskForCheckPoint method, and to be used as a callback function (completion handler) to get the risk response from Paygilant.
///
- (void)getRiskForCheckPointWithCheckPoint:(CheckPoint * _Nonnull)checkPoint completion:(void (^ _Nonnull)(Risk * _Nonnull, NSString * _Nonnull, NSString * _Nonnull))completion;
/// Called when arriving at predefined checkpoints, done to track the customer journey in the application and collect data required for Risk Score’s calculation later in the process.
/// \param checkPoint Checkpoint is an interface that contains any relevant data for current check point. There different types of checkpoints, as detailed above.
///
- (void)arriveToCheckPointWithCheckPoint:(CheckPoint * _Nonnull)checkPoint;
/// Calling this endpoint updates the SDK about the final business decision taken by the application.
/// Call it after calling getRiskForCheckPoint.
/// \param type CheckPointType - Checkpoint type (e.g. Transaction, Login etc.)
///
/// \param requestID Request ID of the request that is being updated (output of getRiskForCheckPoint)
///
/// \param status Status – approved/denied/cancelled by the user
///
/// \param transactionID Transaction ID given by the customer’s app server when relevant (e.g. Transaction). If it does not exist, no need to send it.
///
- (void)updateCheckPointStatusWithType:(enum CheckPointType)type requestID:(NSString * _Nonnull)requestID status:(enum CheckPointStatus)status transactionID:(NSString * _Nullable)transactionID;
/// Called when we want to start listening for events that occurred during application lifetime.
/// Call startNewScreenListener inside viewWillAppear() Controller method for listening to all events occurring during the Controller lifetime.
/// This is the only way that the application should initialize PaygilantScreenListener object.
/// \param type Type of the screen.
///
/// \param actionId Unique ID for an action.
///
/// \param view Pass contain view in controller.
///
///
/// returns:
/// Object that is used to manage tracking.
- (PaygilantScreenListener * _Nonnull)startNewScreenListenerWith:(enum ScreenListenerType)type actionId:(NSInteger)actionId view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Used to update the PaygilantManager with device ID information, best if called immediately after PaygilantManager.setup.
- (void)initializeDeviceId;
/// alled on relevant request access when requesting permissions for the application.
/// \param typeMobilePermission Paygilant enum for relevant mobile permissions
///
- (void)onRequestAccessWithTypeMobilePermission:(enum MobilePermission)typeMobilePermission;
@end


/// PaygilantScreenListener is the SDK class that monitors the user’s interactions with the application and device.
/// The class supports monitoring user touch events, motion sensors or both.
/// Monitoring user interaction and motion sensors is a resource-intensive process.
/// Paygilant therefore recommends seeking guidance from its assigned  customer success manager to ensure that selected c
/// heckpoints/screens/events for monitoring are carefully chosen.
SWIFT_CLASS("_TtC12PaygilantSDK23PaygilantScreenListener")
@interface PaygilantScreenListener : NSObject
/// Init PaygilantScreenListener
/// \param screenListenerType screenListenerType
///
/// \param actionId actionId
///
/// \param view self.view
///
- (nonnull instancetype)initWithType:(enum ScreenListenerType)type actionId:(NSInteger)actionId view:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// To be used when it’s needed to listen motion sensors.
/// When listening to entire screen,
/// function needs to be called from inside the viewWillAppear() ViewConroller method
- (void)resumeListen SWIFT_DEPRECATED_MSG("no longer available, use startScreenListener in viewWillAppear...");
/// Called when completing screen tracking and when stopping to listen to motion sensors, e.g. moving to next screen, pushing on login button etc.
/// It must be called from the viewWillDisappear() controller method.
- (void)finishScreenListener;
@end

@class UIGestureRecognizer;

@interface PaygilantScreenListener (SWIFT_EXTENSION(PaygilantSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PaymentMethodType, open) {
  PaymentMethodTypeCREDIT_CARD = 0,
  PaymentMethodTypeBANK_ACCOUNT = 1,
  PaymentMethodTypeECHECK = 2,
  PaymentMethodTypeUNKNOWN = 3,
};


SWIFT_CLASS("_TtC12PaygilantSDK27PaymentMethodTypeEnumerator")
@interface PaymentMethodTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK25PaymentMethodTypeToString")
@interface PaymentMethodTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum PaymentMethodType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum PaymentMethodType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Registration checkpoint. to be used after registration of new user.
/// on this checkpoint the connection between user id and device is done.
SWIFT_CLASS("_TtC12PaygilantSDK8Register")
@interface Register : CheckPoint
/// get json from obj
///
/// returns:
/// json
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
/// init obj by json
/// \param json <#json description#>
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@end

enum RiskLevel : NSInteger;

SWIFT_CLASS("_TtC12PaygilantSDK4Risk")
@interface Risk : NSObject
@property (nonatomic, readonly) enum RiskLevel riskLevel;
/// String representation of risk
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RiskLevel, open) {
  RiskLevelExpire = -2,
  RiskLevelUndefined = -1,
  RiskLevelLow = 0,
  RiskLevelMedium = 1,
  RiskLevelHigh = 2,
  RiskLevelVeryHign = 3,
};


SWIFT_CLASS("_TtC12PaygilantSDK19RiskLevelEnumerator")
@interface RiskLevelEnumerator : NSObject
/// for react native calls (objc)
///
/// returns:
/// [String: NSNumber]
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ScreenListenerType, open) {
  ScreenListenerTypeREGISTRATION_FORM = 0,
  ScreenListenerTypeLOGIN_FORM = 1,
  ScreenListenerTypeMAIN_SCREEN = 2,
  ScreenListenerTypeCATALOG_SCREEN = 3,
  ScreenListenerTypeSEARCH_SCREEN = 4,
  ScreenListenerTypePRODUCT_SCREEN = 5,
  ScreenListenerTypeGENERAL_FORM = 6,
  ScreenListenerTypePINCODE = 7,
  ScreenListenerTypeTRANSACTION_DETAILS = 8,
  ScreenListenerTypeCONTACTS = 9,
  ScreenListenerTypePAYMENT_SCREEN = 10,
  ScreenListenerTypeEMULATOR_CHECK = 11,
  ScreenListenerTypeGENERAL = 12,
  ScreenListenerTypeADD_PAYMENT_SCREEN = 13,
  ScreenListenerTypeWITHDRAW_SCREEN = 14,
  ScreenListenerTypeDEPOSIT_SCREEN = 15,
};


SWIFT_CLASS("_TtC12PaygilantSDK28ScreenListenerTypeEnumerator")
@interface ScreenListenerTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK26ScreenListenerTypeToString")
@interface ScreenListenerTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum ScreenListenerType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum ScreenListenerType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
enum TransactionType : NSInteger;

/// Transaction checkpoint. to be used on transaction attempt.
/// There are few types of transactions, see transactionType enum
SWIFT_CLASS("_TtC12PaygilantSDK11Transaction")
@interface Transaction : CheckPoint
/// backward compatibility constructor
/// \param time_nsdata time_nsdata
///
/// \param actType actType
///
/// \param curType curType
///
/// \param userID userID
///
/// \param amount amount
///
/// \param destinationId destinationId
///
/// \param paymentMethod paymentMethod
///
- (nonnull instancetype)initWithTime_nsdata:(NSDate * _Nonnull)time_nsdata actType:(enum TransactionType)actType curType:(enum CurrencyCode)curType userID:(NSString * _Nonnull)userID amount:(double)amount destinationId:(NSString * _Nonnull)destinationId paymentMethod:(NSString * _Nonnull)paymentMethod OBJC_DESIGNATED_INITIALIZER;
/// getJson
///
/// returns:
/// return Json as [String:Any]
- (NSDictionary<NSString *, id> * _Nonnull)getJson SWIFT_WARN_UNUSED_RESULT;
/// init obj by json
/// \param json json
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
@end

/// transaction optional types
typedef SWIFT_ENUM(NSInteger, TransactionType, open) {
/// payment for goods
  TransactionTypePURCHASE = 0,
/// money transfer to another payee
  TransactionTypeMONEY_TRANSFER = 1,
/// money deposit to store
  TransactionTypeDEPOSIT = 2,
/// money withdraw from store
  TransactionTypeWITHDRAW = 3,
/// P2P transaction  - transfer money to another person
  TransactionTypeP2P = 4,
/// In store transaction, by NFC , QR code, etc.
  TransactionTypeIN_STORE = 5,
/// Load money into wallet
  TransactionTypeLOAD = 6,
/// Buy mobile airtime
  TransactionTypeAIRTIME = 7,
/// Online merchant transaction
  TransactionTypeONLINE_STORE = 8,
};


SWIFT_CLASS("_TtC12PaygilantSDK25TransactionTypeEnumerator")
@interface TransactionTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK23TransactionTypeToString")
@interface TransactionTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum TransactionType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum TransactionType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VerificationType, open) {
  VerificationTypeVERIFIED = 0,
  VerificationTypeNOT_VERIFIED = 1,
  VerificationTypeUNKNOWN = 2,
};


SWIFT_CLASS("_TtC12PaygilantSDK26VerificationTypeEnumerator")
@interface VerificationTypeEnumerator : NSObject
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12PaygilantSDK24VerificationTypeToString")
@interface VerificationTypeToString : NSObject
+ (NSString * _Nonnull)toStringWithType:(enum VerificationType)type SWIFT_WARN_UNUSED_RESULT;
+ (enum VerificationType)fromStringWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
